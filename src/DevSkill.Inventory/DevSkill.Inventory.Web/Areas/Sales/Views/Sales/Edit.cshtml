@model DevSkill.Inventory.Web.Areas.Sales.Models.SaleEditViewModel

@{
    ViewData["Title"] = "Edit Sale";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        input[readonly] {
            background-color: #e9ecef !important;
            cursor: not-allowed;
        }

        .select2-container .select2-selection--single {
            height: 38px !important;
            padding: 6px 12px;
            border: 1px solid #ced4da;
            border-radius: 0.375rem;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 24px;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 36px;
            right: 6px;
        }

        .select2-container {
            width: 100% !important;
        }

        .form-label {
            font-weight: 500;
            color: #333;
        }

        .input-group .form-select {
            flex: 1;
        }

        @@media (max-width: 768px) {
            .form-label {
                font-size: 0.9rem;
            }
        }
    </style>
}

<div class="container mt-4">
    <h3>Edit Sale - @Model.InvoiceNo</h3>
    <form id="saleEditForm">
        <input type="hidden" id="saleId" value="@Model.Id" />

        <div class="row g-3 mb-3">
            <div class="col-md-2">
                <label class="form-label">Sale Date *</label>
                <input type="date" class="form-control" id="saleDate" required value="@Model.Date.ToString("yyyy-MM-dd")">
            </div>

            <div class="col-md-4">
                <label class="form-label">Customer *</label>
                <div class="d-flex gap-2">
                    <select class="form-select w-100" id="customerSelect" required></select>
                    <button class="btn btn-outline-danger" type="button" data-bs-toggle="modal" data-bs-target="#addCustomerModal">
                        <i class="fa fa-plus"></i>
                    </button>
                </div>
            </div>

            <div class="col-md-3">
                <label class="form-label">Sale Type *</label>
                <select class="form-select select2" id="saleType" required></select>
            </div>

            <div class="col-md-3">
                <label class="form-label">Product *</label>
                <select class="form-select" id="productSelect"></select>
            </div>
        </div>

        <div class="col-md-12">
            <table class="table table-bordered" id="productTable">
                <thead id="productTableHeader">
                    <tr>
                        <th>Code</th>
                        <th>Product</th>
                        <th>Stock</th>
                        <th>Quantity</th>
                        <th>Unit Price</th>
                        <th>Sub Total</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="productTableBody">
                    <!-- Product rows will be appended here -->
                </tbody>
                <tbody>
                    <tr>
                        <td colspan="5" class="text-end">VAT (%)</td>
                        <td>
                            <input type="number" class="form-control" id="vatPercent" value="@Model.VAT" oninput="calculateTotal()">
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="5" class="text-end fw-bold">Net Amount</td>
                        <td>
                            <input type="text" class="form-control fw-bold" id="netAmount" readonly value="@Model.TotalAmount">
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="5" class="text-end">Discount</td>
                        <td>
                            <input type="number" class="form-control" id="discount" value="@Model.Discount" oninput="calculateTotal()">
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="5" class="text-end fw-bold">Total Amount</td>
                        <td>
                            <input type="text" class="form-control fw-bold" id="totalAmount" readonly value="@Model.TotalAmount">
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="5" class="text-end">Paid Amount</td>
                        <td>
                            <input type="number" class="form-control" id="paidAmount" value="@Model.PaidAmount" oninput="calculateTotal()">
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="5" class="text-end">Due Amount</td>
                        <td>
                            <input type="text" class="form-control" id="dueAmount" readonly value="@Model.DueAmount">
                        </td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="row g-3 mb-3">
            <div class="col-md-4">
                <label class="form-label">Account Type</label>
                <select id="accountTypeSelect" class="form-select">
                    <option disabled selected>Select Account Type</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Account No</label>
                <select id="accountNoSelect" class="form-select">
                    <option disabled selected>Select Account No</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Note</label>
                <input type="text" class="form-control" id="note" value="@Model.Note">
            </div>
        </div>

        <div class="row g-3 mb-3">
            <div class="col-md-12">
                <label class="form-label">Terms & Conditions</label>
                <textarea id="terms" class="form-control">@Html.Raw(Model.Terms)</textarea>
            </div>
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-success">Update Sale</button>
        </div>
    </form>
</div>

<!-- Add Customer Modal -->
<div class="modal fade" id="addCustomerModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Customer</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="addCustomerForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <input type="text" class="form-control mb-2" id="newCustomerName" placeholder="Customer Name" required>
                    <input type="text" class="form-control mb-2" id="newCustomerCompany" placeholder="Company Name">
                    <input type="text" class="form-control mb-2" id="newCustomerMobile" placeholder="Mobile Number">
                    <input type="text" class="form-control mb-2" id="newCustomerAddress" placeholder="Address">
                    <input type="email" class="form-control mb-2" id="newCustomerEmail" placeholder="Email">
                    <input type="number" class="form-control mb-2" id="newCustomerOpeningBalance" placeholder="Opening Balance" value="0">
                    <input type="file" class="form-control mb-2" id="newCustomerImage" accept="image/*">
                    <img id="previewImage" class="mt-2" style="max-height: 100px; display: none;" />
                    <div id="customerError" class="text-danger small mt-1"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button class="btn btn-primary" type="submit">Save Customer</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.ckeditor.com/4.25.1-lts/standard/ckeditor.js"></script>
    <script>
        // ✅ CKEditor Initialization
        CKEDITOR.replace('terms');

        // ✅ Global Variables
        let items = [];

        // ✅ Fill Select2 Customer with current customer selected
        function setupCustomerSelect2(selectedId, selectedText) {
            $('#customerSelect').select2({
                placeholder: "Search customer",
                ajax: {
                    url: '/Settings/Sales/searchCustomers',
                    data: params => ({ query: params.term }),
                    processResults: data => ({ results: data })
                }
            });

            if (selectedId && selectedText) {
                const option = new Option(selectedText, selectedId, true, true);
                $('#customerSelect').append(option).trigger('change');
            }
        }

        // ✅ Load Sale Types
        function setupSaleTypes(selectedId) {
            $.get('/Settings/Sales/GetSaleTypes', function (saleTypes) {
                $('#saleType').html('<option disabled selected>Select Sale Type</option>');
                saleTypes.forEach(type => {
                    $('#saleType').append(`<option value="${type.id}">${type.text}</option>`);
                });
                if (selectedId) {
                    $('#saleType').val(selectedId);
                }
            });
        }

        // ✅ Load Account Types and Accounts
        function setupAccountTypesAndNos(accountType, accountNo) {
            $.get('/Settings/BalanceAccount/GetAccountTypes', function (accountTypes) {
                $('#accountTypeSelect').html('<option disabled selected>Select Account Type</option>');
                accountTypes.forEach(type => {
                    $('#accountTypeSelect').append(`<option value="${type.id}" data-name="${type.text}">${type.text}</option>`);
                });

                if (accountType) {
                    $('#accountTypeSelect').val(accountType).trigger('change');
                }
            });

            $('#accountTypeSelect').on('change', function () {
                const typeName = $(this).find('option:selected').data('name');
                if (!typeName) return;

                const url = `/Settings/${typeName}Account/GetAllAccounts`;
                $.get(url, function (accounts) {
                    $('#accountNoSelect').html('<option disabled selected>Select Account No</option>');
                    accounts.forEach(account => {
                        $('#accountNoSelect').append(`<option value="${account.id}">${account.name}</option>`);
                    });
                    if (accountNo) {
                        $('#accountNoSelect').val(accountNo);
                    }
                }).fail(() => {
                    alert(`Failed to load accounts for ${typeName}`);
                    $('#accountNoSelect').html('<option disabled selected>Select Account No</option>');
                });
            });
        }

        // ✅ Product Select2 Init
        function setupProductSelect2() {
            $('#productSelect').on('select2:opening', function (e) {
                if (!$('#saleType').val()) {
                    alert('Please select a sale type first!');
                    e.preventDefault();
                }
            });

            $('#productSelect').select2({
                placeholder: "Search product",
                ajax: {
                    url: '/Settings/Sales/searchProducts',
                    data: params => {
                        const saleTypeId = $('#saleType').val();
                        if (!saleTypeId) return false;
                        return { query: params.term, saleTypeId };
                    },
                    processResults: data => ({ results: data })
                }
            });

            $('#productSelect').on('select2:select', function (e) {
                const p = e.params.data;
                const exists = $(`#productTableBody tr[data-product-id='${p.id}']`).length > 0;
                if (exists) return;

                const row = `<tr data-product-id="${p.id}" data-product-code="${p.code}">
                    <td>${p.code}</td>
                    <td>${p.text}</td>
                    <td>${p.stock}</td>
                    <td><input type='number' class='form-control qty' data-id='${p.id}' data-price='${p.unitPrice}'></td>
                    <td class='unitPrice'>${p.unitPrice}</td>
                    <td class='subtotal'>0</td>
                    <td><button type='button' class='btn btn-danger btn-sm remove'>X</button></td>
                </tr>`;
                $('#productTableBody').append(row);
            });
        }

        // ✅ Utility Function: Recalculate Totals
        function calculateTotal() {
            let total = 0;
            $('#productTableBody tr').each(function () {
                const sub = parseFloat($(this).find('.subtotal').text()) || 0;
                total += sub;
            });

            const vat = parseFloat($('#vatPercent').val()) || 0;
            const discount = parseFloat($('#discount').val()) || 0;
            const paid = parseFloat($('#paidAmount').val()) || 0;

            const vatAmt = total * (vat / 100);
            const netAmt = total + vatAmt;
            const final = netAmt - discount;
            const due = final - paid;

            $('#netAmount').val(netAmt.toFixed(2));
            $('#totalAmount').val(final.toFixed(2));
            $('#dueAmount').val(due.toFixed(2));
        }

        // ✅ Populate product table with existing items
        function populateProductTable(items) {
            items.forEach(item => {
                const row = `<tr data-product-id="${item.ProductID}" data-product-code="${item.ProductCode}">
                    <td>${item.ProductCode}</td>
                    <td>${item.ProductName}</td>
                    <td>${item.Stock}</td>
                    <td><input type='number' class='form-control qty' data-id='${item.ProductID}' data-price='${item.UnitPrice}' value='${item.Quantity}'></td>
                    <td class='unitPrice'>${item.UnitPrice}</td>
                    <td class='subtotal'>${(item.Quantity * item.UnitPrice).toFixed(2)}</td>
                    <td><button type='button' class='btn btn-danger btn-sm remove'>X</button></td>
                </tr>`;
                $('#productTableBody').append(row);
            });
            calculateTotal();
        }

        // ✅ Document Ready
        $(document).ready(function () {
            setupCustomerSelect2("@Model.CustomerID", "@Model.CustomerName");
            setupSaleTypes("@Model.SalesType");
            setupAccountTypesAndNos("@Model.AccountType", "@Model.AccountNo");
            setupProductSelect2();

            // Populate product table with existing items
            populateProductTable(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Items)));

            // Product Table Events
            $('#productTable').on('click', '.remove', function () {
                $(this).closest('tr').remove();
                calculateTotal();
            });

            $('#productTable').on('input', '.qty', function () {
                const qty = parseFloat($(this).val());
                const price = parseFloat($(this).data('price'));
                const sub = qty * price;
                $(this).closest('tr').find('.subtotal').text(sub.toFixed(2));
                calculateTotal();
            });

            $('#vatPercent, #discount, #paidAmount').on('input', calculateTotal);

            // Sale Type Change Event: Refresh Unit Prices
            $('#saleType').on('change', function () {
                const saleTypeId = $(this).val();
                $('#productTableBody tr').each(function () {
                    const row = $(this);
                    const qtyInput = row.find('.qty');
                    const productId = row.data('product-id');

                    $.get('/Settings/Sales/GetProductDetails', {
                        productId,
                        saleTypeId
                    }, function (p) {
                        qtyInput.data('price', p.unitPrice);
                        row.find('.unitPrice').text(p.unitPrice);
                        const qty = parseFloat(qtyInput.val()) || 0;
                        row.find('.subtotal').text((qty * p.unitPrice).toFixed(2));
                        calculateTotal();
                    });
                });
            });

            // Form Submission
            $('#saleEditForm').on('submit', function (e) {
                e.preventDefault();

                const items = [];
                $('#productTableBody tr').each(function () {
                    const row = $(this);
                    const productID = row.data('product-id');
                    const productCode = row.data('product-code');
                    const quantity = parseFloat(row.find('.qty').val());
                    const unitPrice = parseFloat(row.find('.unitPrice').text());

                    if (!productID || quantity <= 0 || unitPrice <= 0) return;

                    items.push({
                        ProductID: productID,
                        ProductCode: productCode,
                        Quantity: quantity,
                        UnitPrice: unitPrice,
                        SubTotal: quantity * unitPrice
                    });
                });

                const saleData = {
                    Id: $('#saleId').val(),
                    InvoiceNo: "@Model.InvoiceNo",
                    Date: $('#saleDate').val(),
                    CustomerID: $('#customerSelect').val(),
                    SalesType: $('#saleType').val(),
                    AccountType: $('#accountTypeSelect').val(),
                    AccountNo: $('#accountNoSelect').val(),
                    Note: $('#note').val(),
                    Terms: CKEDITOR.instances['terms'].getData(),
                    VAT: parseFloat($('#vatPercent').val()) || 0,
                    Discount: parseFloat($('#discount').val()) || 0,
                    TotalAmount: parseFloat($('#totalAmount').val()) || 0,
                    PaidAmount: parseFloat($('#paidAmount').val()) || 0,
                    DueAmount: parseFloat($('#dueAmount').val()) || 0,
                    PaymentStatus: calculatePaymentStatus(),
                    Items: items
                };

                $.ajax({
                    url: '/Settings/Sales/Update',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(saleData),
                    success: function (res) {
                        alert(res.message || 'Sale updated successfully!');
                        window.location.href = '/Settings/Sales/Index';
                    },
                    error: function (xhr) {
                        alert(xhr.responseJSON?.message || 'Error updating sale.');
                    }
                });
            });

            function calculatePaymentStatus() {
                const total = parseFloat($('#totalAmount').val()) || 0;
                const paid = parseFloat($('#paidAmount').val()) || 0;

                if (paid >= total) return 0; // FullPaid
                if (paid > 0) return 1;       // PartialPaid
                return 2;                     // Due
            }

            // Add Customer Modal Form Submit
            $(document).on('submit', '#addCustomerForm', function (e) {
                e.preventDefault();

                const formData = new FormData();
                formData.append('Name', $('#newCustomerName').val());
                formData.append('CompanyName', $('#newCustomerCompany').val());
                formData.append('MobileNumber', $('#newCustomerMobile').val());
                formData.append('Address', $('#newCustomerAddress').val());
                formData.append('Email', $('#newCustomerEmail').val());
                formData.append('OpeningBalance', parseFloat($('#newCustomerOpeningBalance').val()) || 0);

                const img = $('#newCustomerImage')[0].files[0];
                if (img) formData.append('CustomerImage', img);

                $('#customerError').text('');

                $.ajax({
                    url: '/Admin/Customers/Add',
                    method: 'POST',
                    contentType: false,
                    processData: false,
                    data: formData,
                    success: function (response) {
                        if (response.error) {
                            $('#customerError').text(response.error);
                            return;
                        }
                        const newOption = new Option(response.text, response.id, true, true);
                        $('#customerSelect').append(newOption).trigger('change');

                        const modalEl = document.getElementById('addCustomerModal');
                        const modal = bootstrap.Modal.getInstance(modalEl);
                        if (modal) modal.hide();

                        setTimeout(() => {
                            $('body').removeClass('modal-open');
                            $('.modal-backdrop').remove();
                            $('body').css('overflow', 'auto');
                        }, 500);
                    },
                    error: function (xhr) {
                        $('#customerError').text(xhr.responseJSON?.error || 'Failed to add customer.');
                    }
                });
            });

            // Preview image on file select
            $('#newCustomerImage').on('change', function () {
                const file = this.files[0];
                if (!file) return $('#previewImage').hide();

                const reader = new FileReader();
                reader.onload = e => {
                    $('#previewImage').attr('src', e.target.result).show();
                };
                reader.readAsDataURL(file);
            });
        });
    </script>
}